@page "/movie/search"

@using BlazorPracticeServer.Components.MovieComp
@using System.ComponentModel
@using BlazorPracticeServer.Entity.Dtos.MovieDto
@using BlazorPracticeServer.Services
@using BlazorPracticeServer.Helper

<EditForm Model="FilterMovieDto" class="form-inline">
    <div class="form-group mb-2">
        <label for="title" class="sr-only"> Title</label>
        
        <InputText class="form-control" DisplayName="Movie Title" @bind-Value="FilterMovieDto.Title" @onchange="SearchForMovies"></InputText>
    </div>

    <div class="form-group mx-sm-3 mb-2">
        <InputSelect class="form-control" @bind-Value="FilterMovieDto.GenreId" @onmouseout="SearchForMovies">
            <option value="0">
                --Select a Genre
            </option>
            @foreach (var genre in Genres)
            {
                <option value="@genre.Id.ToString()">@genre.Name</option>
            }
        </InputSelect>
    </div>
    <h3> Genre : @_selectedGenre </h3>

    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="FilterMovieDto.UpcomingReleases" />
        <label class="form-check-label" for="upcomingReleases">
            Upcoming Releases
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="inTheaters" @bind="FilterMovieDto.InTheaters" />
        <label class="form-check-label" for="inTheaters">
            In Theater
        </label>
    </div>
</EditForm>
<BSButton Color="@Color.Light" @onclick="@SearchForMovies">Filter</BSButton>
<BSButton Color="@Color.Light" @onclick="@Clear">Clear</BSButton>

@if (SearchedMovies == null || !SearchedMovies.Any())
{
    <h3> No movie found </h3>
}
else
{
    <MoviesList Movies="SearchedMovies.ToList()"></MoviesList>
}


@code {
    [Inject] public IMovieService MovieService { get; set; }
    [Inject] public IGenreService GenreService { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    public FilterMovieDto FilterMovieDto { get; set; } = new FilterMovieDto();

    private string _searchTitle = "";
    private string _selectedGenre = "0";
    private bool _upcomingReleaseStatus = false;
    private bool _inTheaterStatus = false;

    private Genre _genre = new Genre();

    private List<Movie> SearchedMovies { get; set; } = new List<Movie>();
    private List<Genre> Genres { get; set; } = new List<Genre>();

    protected async override Task OnInitializedAsync()
    {
        var queryStrings = NavigationManager.GetQueryString(NavigationManager.Uri);
        Genres = (await GenreService.RetrieveAllGenreAsync()).ToList();

        if (queryStrings != null)
        {
            FillFilterWithQueryStrings(queryStrings);
            await SearchForMovies();
        }

    }

    private async Task SearchForMovies()
    {
        var queryString = GenerateQueryString();
        if (!string.IsNullOrWhiteSpace(queryString))
        {
            queryString = $"?{queryString}";
            NavigationManager.NavigateTo("movie/search" + queryString);
        }
        SearchedMovies = (await MovieService.RetrieveMovieByFilterAsync(FilterMovieDto)).ToList();


        await InvokeAsync(StateHasChanged);
    }

    private void Clear()
    {
        _searchTitle = string.Empty;
        _selectedGenre = string.Empty;
        _upcomingReleaseStatus = false;
        _inTheaterStatus = false;
    }
    private string GenerateQueryString()
    {
        var queryStringsDict = new Dictionary<string, string>();
        queryStringsDict["genreId"] = FilterMovieDto.GenreId.ToString();
        queryStringsDict["title"] = FilterMovieDto.Title ?? "";
        queryStringsDict["inTheaters"] = FilterMovieDto.InTheaters.ToString();
        queryStringsDict["upcomingReleases"] = FilterMovieDto.UpcomingReleases.ToString();

        var defaultValue = new List<string>() {"false", "", "0"};

        return string.Join("&", queryStringsDict
            .Where(x=> !defaultValue.Contains(x.Value.ToLower()))
            .Select(x=> $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}").ToArray())
        ;
    }

    private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
    {
        if (queryStrings.ContainsKey("genreId"))
        {
            FilterMovieDto.GenreId = int.Parse(queryStrings["genreId"]);
        }

        if (queryStrings.ContainsKey("title"))
        {
            FilterMovieDto.Title = queryStrings["title"];
        }

        if (queryStrings.ContainsKey("intheaters"))
        {
            FilterMovieDto.UpcomingReleases = bool.Parse(queryStrings["intheaters"]);
        }

        if (queryStrings.ContainsKey("upcomingReleases"))
        {
            FilterMovieDto.UpcomingReleases = bool.Parse(queryStrings["upcomingReleases"]);
        }

        if (queryStrings.ContainsKey("page"))
        {
            FilterMovieDto.PageNumber = int.Parse(queryStrings["page"]);
        }
    }
}
