@using BlazorPracticeServer.Models
@using BlazorPracticeServer.Models.Arguments
@using BlazorPracticeServer.Services
@inject NavigationManager NavigationManager

<EditForm Model="Movie" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Title:</label>
        <div>
            <InputText class="form-control" @bind-Value="Movie.Title">
            </InputText>
            <ValidationMessage For="@(() => Movie.Title)" />
        </div>
    </div>

    <div class="form-group">
        <label>In Theaters</label>
        <div>
            <InputCheckbox class="form-control" @bind-Value="Movie.InTheater" />
            <ValidationMessage For="@(() => Movie.InTheater)" />
        </div>
    </div>

    <div class="form-group">
        <label>Trailer:</label>
        <div>
            <InputText class="form-control" @bind-Value="Movie.Trailer" />
            <ValidationMessage For="@(()=> Movie.Trailer)" />
        </div>
    </div>

    <div class="form-group">
        <label>Release Date</label>
        <div>
            <InputDate @bind-Value="Movie.ReleaseDate" />
            <ValidationMessage For="@(()=> Movie.ReleaseDate)" />
        </div>
    </div>

    <div class="form-group">
        <label>Poster</label>
        <InputImg ImageURL="@_imageUrl" OnSelectedImage="PosterSelected" />
    </div>

    <!-- #region Summary -->
    <div class="form-group form-markdown">
        <InputMarkdown @bind-Value="Movie.Summary"
                       Label="Summary"
                       For="@(() => Movie.Summary)" />
    </div>
    <!-- #endregion -->
    <!-- #region Genre MultiSelector -->
    <MultipleSelector NotSelected="NotSelectedModel" Selected="SelectedModels">
    </MultipleSelector>
    <!-- #endregion -->
    <!-- #region Actor -->
    <div class="form-group">
        <label>Actors:</label>
        <div>
            <MultipleSelectorTypeahead Context="person"
                                       SearchMethod="SearchMethod" SelectedElements="SelectedActors">
                <MyResultTemplate>
                    <img style="width: 50px;" src="@person.Picture" />
                    @person.Name
                </MyResultTemplate>
                <MyListTemplate>
                    @person.Name / <input type="text" placeholder="Character" @bind="person.Character" />
                </MyListTemplate>
            </MultipleSelectorTypeahead>
        </div>
    </div>
    <!-- #endregion -->


    <button class="btn btn-success" type="submit"> Save Changes </button>
</EditForm>
@code {
    [Inject] public IMovieService MovieService { get; set; }
    [Inject] public IGenreService GenreService { get; set; }
    [Inject] public IPersonService PersonService { get; set; }


    [Parameter] public Movie Movie { get; set; }
    [Parameter] public EventCallback<Movie> OnValidSubmit { get; set; }
    [Parameter] public List<Person> SelectedActors { get; set; } = new List<Person>();

    private List<MultipleSelectorModel> SelectedModels { get; set; } = new List<MultipleSelectorModel>();
    private List<MultipleSelectorModel> NotSelectedModel { get; set; } = new List<MultipleSelectorModel>();


    //public List<Genre> Genres { get; set; } = new List<Genre>();

    private string _selectedGenre = string.Empty;
    private string _imageUrl { get; set; }

    protected async override Task OnInitializedAsync()
    {

    #region Movie Genre list -> MultipleSelctor Model list
        if (Movie.MovieGenres != null)
        {   // in edit page
            SelectedModels =
                Movie.MovieGenres
                    .Select(x => new MultipleSelectorModel(x.GenreId.ToString(), x.Genre.Name))
                    .ToList();

            var selectedGenres =
                Movie.MovieGenres
                    .Select(x => x.Genre)
                    .ToList();

            NotSelectedModel =
                (await GenreService.RetrieveAllGenreAsync()).ToList()
                    .Where(g => !selectedGenres.Contains(g))
                    .Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name))
                    .ToList();
        }
        else
        {   // in create page
            NotSelectedModel =
                (await GenreService.RetrieveAllGenreAsync()).ToList()
                    .Select(g => new MultipleSelectorModel(g.Id.ToString(), g.Name))
                    .ToList();
        }

        if (!string.IsNullOrEmpty(Movie.Poster))
            _imageUrl = Movie.Poster;
        #endregion
    }

    private void PosterSelected(string movieUrl)
    {
        Movie.Poster = movieUrl;
        _imageUrl = null;
    }

    private async Task<IEnumerable<Person>> SearchMethod(string searchText)
    {
        return await PersonService.RetrievePeopleByName(searchText);
    }

    private async Task ValidSubmit()
    {
        // multipleselectormodel list -> genre list

        var selectedGenres = SelectedModels.Select(g => new Genre() { Id = int.Parse(g.Key) }).ToList();

        Movie.MovieGenres = SelectedModels
            .Select(e => new MovieGenre() {  GenreId = int.Parse(e.Key) })
            .ToList();

        Movie.MoviePeople = SelectedActors
            .Select(e => new MoviePerson() { PersonId = e.Id , Character = e.Character ?? "n/a" });

        if (!string.IsNullOrWhiteSpace(Movie.Poster))
            _imageUrl = null;

        await OnValidSubmit.InvokeAsync();

        await InvokeAsync(StateHasChanged);

        NavigationManager.NavigateTo("/");
    }
}
