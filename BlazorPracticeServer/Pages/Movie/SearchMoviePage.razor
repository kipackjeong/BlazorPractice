@page "/movie/search"
@using BlazorPracticeServer.Components.MovieComp
@using System.ComponentModel
@using BlazorPracticeServer.Services

<div class="form-inline">
    <div class="form-group mb-2">
        <label for="title" class="sr-only"> Title</label>
        <input type="text" class="form-control" id="title" placeholder="Movie Title"
               @bind-value="@_searchTitle" @bind-value:event="oninput"
               @onkeypress="@TitleKeyPress" />
    </div>

    <div class="form-group mx-sm-3 mb-2">
        <select class="form-control" @bind="_selectedGenre">
            <option value="0">
                --Select a Genre
            </option>
            @foreach (var genre in Genres)
            {
                <option value="@genre.Id">@genre.Name</option>
            }
        </select>
    </div>

    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="_upcomingReleaseStatus" />
        <label class="form-check-label" for="upcomingReleases">
            Upcoming Releases
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="inTheaters" @bind="_inTheaterStatus" />
        <label class="form-check-label" for="inTheaters">
            Upcoming Releases
        </label>
    </div>
</div>
<BSButton Color="@Color.Light" @onclick="@SearchForMovies">Filter</BSButton>
<BSButton Color="@Color.Light" @onclick="@Clear">Clear</BSButton>


@if (_searchTitle == string.Empty)
{
    <MoviesList Movies="SearchedMovies"></MoviesList>
}
@if (SearchedMovies == null)
{
    <h3> No movie found </h3>
}
else
{
    <MoviesList Movies="SearchedMovies"></MoviesList>
}


@code {
    [Inject] public IMovieService MovieService { get; set; }
    [Inject] public IGenreService GenreService { get; set; }


    private string _searchTitle = "";
    private string _selectedGenre = "0";
    private bool _upcomingReleaseStatus = false;
    private bool _inTheaterStatus = false;

    private Genre _genre = new Genre();

    private List<Movie> SearchedMovies { get; set; } = new List<Movie>();
    private List<Genre> Genres { get; set; } = new List<Genre>();

    protected async override Task OnInitializedAsync()
    {
        Genres = (await GenreService.RetrieveAllGenreAsync()).ToList();
    }

    private async Task TitleKeyPress()
    {
        await SearchForMovies();
    }

    private async Task SearchForMovies()
    {
        if (_searchTitle.Length < 2)
        {
            return;
        }
        SearchedMovies = (await MovieService.RetrieveMovieByNameAsync(_searchTitle)).ToList();
        await InvokeAsync(StateHasChanged);
        if (_selectedGenre != "0")
        {
            int selectedGenreInt = int.Parse(_selectedGenre);
            //TODO : Filter movie by Genre
        }
    }

    private void Clear()
    {
        _searchTitle = string.Empty;
        _selectedGenre = string.Empty;
        _upcomingReleaseStatus = false;
        _inTheaterStatus = false;
    }
}
