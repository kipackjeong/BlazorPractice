@using System.Timers
@typeparam TItem
@* Modification from chris Sainty's typeahead component *@


<div class="blazored-typeahead">
    <div class="blazored-typeahead__controls">
        <input type="text"
               class="blazored-typeahead__input"
               autocomplete="off"
               placeholder="@Placeholder"
               @bind-value="SearchText"
               @bind-value:event="oninput"
               @onclick="ShowSuggestions"
               @onfocusout="OnFocusOut"/>
    </div>
    @if (_isSearching)
    {
        <div class="blazored-typeahead__results">
            <div class="blazored-typeahead__result">
                <span> loading...</span>
            </div>
        </div>
    }
    else if (ShouldShowSuggestions())
    {
        <div class="blazored-typeahead__results">
            @foreach (var item in Suggestions)
            {
                <div @key="item" class="blazored-typeahead__result" tabindex="0" 
                      @onclick="@(() => SelectSuggestion(item))"
                      @onmouseover="OnmouseoverSuggestion" 
                      @onmouseout="OnmouseoutSuggestion">
                    @ResultTemplate(item)
                </div>
            }
        </div>
    }
    else if (ShowNotFound())
    {
        <div class="blazored-typeahead__results">
            @if (NotFoundTemplate != null)
            {
                <div class="blazored-typeahead__notfound">
                    @NotFoundTemplate
                </div>
            }
            else
            {
                <div class="blazored-typeahead__notfound">
                    No Results Found
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter] public string Placeholder { get; set; }
    [Parameter] public int Debounce { get; set; } = 300;
    [Parameter] public int MinimumLength { get; set; } = 3;
    [Parameter] public Func<string, Task<IEnumerable<TItem>>> SearchMethod { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }
    [Parameter] public RenderFragment NotFoundTemplate { get; set; }
    [Parameter] public RenderFragment<TItem> ResultTemplate { get; set; }

    private bool _isSearching = false;
    private bool _isShowingSuggestions = false;
    private string _searchText = string.Empty;
    private string SearchText
    {
        get => _searchText;
        set
        {
            _searchText = value;
            if (value.Length == 0)
            {
                _isShowingSuggestions = false;
                _debounceTimer.Stop();
                Suggestions = new TItem[0];
            }
            else if (value.Length >= MinimumLength)
            {
                _debounceTimer.Stop();
                _debounceTimer.Start();
            }
        }
    }
    private Timer _debounceTimer;
    protected TItem[] Suggestions { get; set; } = new TItem[0];
    bool _isMouseInSuggestion = false;


    protected async override Task OnInitializedAsync()
    {
        _debounceTimer = new Timer();
        _debounceTimer.Interval = Debounce;
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += Search;
    }

    protected async void Search(Object source, ElapsedEventArgs e)
    {
        _isSearching = true;
        _isShowingSuggestions = false;
        await InvokeAsync(StateHasChanged);

        Suggestions = (await SearchMethod.Invoke(_searchText)).ToArray();
        _isSearching = false;
        _isShowingSuggestions = true;
        await InvokeAsync(StateHasChanged);
    }

    private void ShowSuggestions()
    {
        if (Suggestions.Any())
        {
            _isShowingSuggestions = true;
        }
    }

    private bool ShouldShowSuggestions()
    {
        return _isShowingSuggestions && Suggestions.Any();
    }

    private bool ShowNotFound()
    {
        return !Suggestions.Any() && _isShowingSuggestions;
    }

    private async Task SelectSuggestion(TItem item)
    {
        SearchText = "";
        await ValueChanged.InvokeAsync(item);
        await InvokeAsync(StateHasChanged);
    }

    private void OnFocusOut()
    {
        if (!_isMouseInSuggestion)
        {
            _isShowingSuggestions = false;
        }
    }

    private void OnmouseoverSuggestion()
    {
        _isMouseInSuggestion = true;
    }

    private void OnmouseoutSuggestion()
    {

        _isMouseInSuggestion = false;
    }

}