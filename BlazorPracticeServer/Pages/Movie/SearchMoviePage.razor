@page "/movie/search"
@using BlazorPracticeServer.Components.MovieComp
@using System.ComponentModel
@inject IRepository Repository

<div class="form-inline">
    <div class="form-group mb-2">
        <label for="title" class="sr-only"> Title</label>
        <input type="text" class="form-control" id="title" placeholder="Movie Title"
               @bind-value="@title" @bind-value:event="oninput"
               @onkeypress="@TitleKeyPress" />
    </div>

    <div class="form-group mx-sm-3 mb-2">
        <select class="form-control" @bind="selectedGenre">
            <option value="0">
                --Select a Genre
            </option>
            @foreach (var genre in _genres)
            {
                <option value="@genre.Id">@genre.Name</option>
            }
        </select>
    </div>

    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="upcomingReleases" />
        <label class="form-check-label" for="upcomingReleases">
            Upcoming Releases
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="inTheaters" @bind="inTheaters" />
        <label class="form-check-label" for="inTheaters">
            Upcoming Releases
        </label>
    </div>
</div>
<BSButton Color="@Color.Light" @onclick="@SearchForMovies">Filter</BSButton>
<BSButton Color="@Color.Light" @onclick="@Clear">Clear</BSButton>
@if (title.Length == 0)
{
    <MoviesList Movies="AllMovies"></MoviesList>
}
@if (SearchedMovies == null)
{
    <h3> No movie found </h3>
}
else
{
    <MoviesList Movies="SearchedMovies"></MoviesList>
}


@code {
    string title = "";
    string selectedGenre = "0";
    bool upcomingReleases = false;
    bool inTheaters = false;
    public MoviesList movieList;
    private Genre _genre = new Genre();
    private List<Movie> AllMovies { get; set; } = new List<Movie>();
    private List<Movie> SearchedMovies { get; set; } = new List<Movie>();
    private List<Genre> _genres { get; set; } = new List<Genre>();

    protected override void OnInitialized()
    {
        _genres = Repository.Genres;
        AllMovies = Repository.Movies;
    }

    private void TitleKeyPress()
    {
        SearchForMovies();
    }

    private void SearchForMovies()
    {
        if (title == string.Empty)
        {
            return;
        }

        if (selectedGenre == "0")
        {
            SearchedMovies = AllMovies.FindAll(m =>
        m.Title.Length >= title.Length
        && m.Title.ToLower().Substring(0, title.Length) == title.ToLower()
    );
        }
        else
        {
            SearchedMovies = AllMovies.FindAll(m =>
            m.Title.Length >= title.Length
            && m.Title.ToLower().Substring(0, title.Length) == title.ToLower()
            && m.Genre.Id == int.Parse(selectedGenre)
            );
        }
    }

    private void Clear()
    {
        title = string.Empty;
        selectedGenre = string.Empty;
        upcomingReleases = false;
        inTheaters = false;
    }
}
