@page "/movie/search"

@using BlazorPracticeServer.Components.MovieComp
@using System.ComponentModel
@using BlazorPracticeServer.Services

<EditForm Model="SearchedMovies" class="form-inline">
    <div class="form-group mb-2">
        <label for="title" class="sr-only"> Title</label>
        
        <InputText class="form-control" DisplayName="Movie Title" @bind-Value="@_searchTitle" @onchange="SearchForMovies"></InputText>
    </div>

    <div class="form-group mx-sm-3 mb-2">
        <InputSelect class="form-control" @bind-Value="@_selectedGenre" @onmouseout="SearchForMovies">
            <option value="0">
                --Select a Genre
            </option>
            @foreach (var genre in Genres)
            {
                <option value="@genre.Id.ToString()">@genre.Name</option>
            }
        </InputSelect>
    </div>
    <h3> Genre : @_selectedGenre </h3>

    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="upcomingReleases" @bind="_upcomingReleaseStatus" />
        <label class="form-check-label" for="upcomingReleases">
            Upcoming Releases
        </label>
    </div>
    <div class="form-group mx-sm-3 mb-2">
        <input type="checkbox" class="form-check-input" id="inTheaters" @bind="_inTheaterStatus" />
        <label class="form-check-label" for="inTheaters">
            In Theater
        </label>
    </div>
</EditForm>
<BSButton Color="@Color.Light" @onclick="@SearchForMovies">Filter</BSButton>
<BSButton Color="@Color.Light" @onclick="@Clear">Clear</BSButton>

@if (SearchedMovies == null || !SearchedMovies.Any())
{
    <h3> No movie found </h3>
}
else
{
    <MoviesList Movies="SearchedMovies.ToList()"></MoviesList>
}


@code {
    [Inject] public IMovieService MovieService { get; set; }
    [Inject] public IGenreService GenreService { get; set; }


    private string _searchTitle = "";
    private string _selectedGenre = "0";
    private bool _upcomingReleaseStatus = false;
    private bool _inTheaterStatus = false;

    private Genre _genre = new Genre();

    private HashSet<Movie> SearchedMovies { get; set; } = new HashSet<Movie>();
    private List<Genre> Genres { get; set; } = new List<Genre>();

    protected async override Task OnInitializedAsync()
    {
        Genres = (await GenreService.RetrieveAllGenreAsync()).ToList();
    }


    private async Task SearchForMovies()
    {
        if(_searchTitle != string.Empty)
            SearchedMovies = (await MovieService.RetrieveMovieByNameAsync(_searchTitle)).ToHashSet();
        if (_selectedGenre != "0")
        {
            int selectedGenreInt = int.Parse(_selectedGenre);
            if (_searchTitle != string.Empty)
            {
                SearchedMovies = SearchedMovies
                    .Where(movie => movie.MovieGenres
                        .Any(movieGenre => movieGenre.Genre.Id == selectedGenreInt)
                    )
                    .ToHashSet();
            }
            else
            {
                SearchedMovies = (await GenreService
                    .RetrieveGenreByIdAsync(selectedGenreInt))
                    .MovieGenres
                    .Select(movieGenre=> movieGenre.Movie)
                    .ToHashSet() ;
            }

        }


        await InvokeAsync(StateHasChanged);
    }

    private void Clear()
    {
        _searchTitle = string.Empty;
        _selectedGenre = string.Empty;
        _upcomingReleaseStatus = false;
        _inTheaterStatus = false;
    }
}
