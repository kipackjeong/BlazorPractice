<BSPagination>
    @foreach (var link in Links)
    {
        <BSPaginationItem>
            <BSPaginationLink style="cursor: pointer" @onclick="@(()=>SelectedPageInternal(link))" PaginationLinkType="PaginationLinkType.Custom">@link.Text</BSPaginationLink>
        </BSPaginationItem>
    }
</BSPagination>


@code {
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public int TotalAmountOfPages { get; set; }
    [Parameter] public int Radius { get; set; }
    [Parameter] public EventCallback<int> SelectedPage { get; set; }
    List<LinkModel> Links;
    #region LinkModel
    class LinkModel
    {
        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enabled { get; set; } = true;
        public bool Active { get; set; } = false;


        public LinkModel(int page)
            : this(page, true)
        {
        }

        public LinkModel(int page, bool enabled)
            : this(page, enabled, page.ToString())
        {

        }

        public LinkModel(int page, bool enabled, string text)
        {
            Page = page;
            Enabled = enabled;
            Text = text;
        }
    }
    #endregion

    private async Task SelectedPageInternal(LinkModel link)
    {
        if (link.Page == CurrentPage)
        {
            return;
        }

        if (!link.Enabled)
        {
            return;
        }

        CurrentPage = link.Page;
        LoadPages();
        await SelectedPage.InvokeAsync(link.Page);
    }

    protected override void OnParametersSet()
    {
        LoadPages();
        base.OnParametersSet();
    }

    private void LoadPages()
    {
        Links = new List<LinkModel>();
        var isPreviousPageLinkEnabled = CurrentPage != 1;
        var previousPage = CurrentPage - 1;
        Links.Add(new LinkModel(previousPage, isPreviousPageLinkEnabled, "Previous"));

        for (int i = 1; i <= TotalAmountOfPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                Links.Add(new LinkModel(i) {Active = CurrentPage == i});
            }
        }

        var isNextPageLinkEnabled = CurrentPage != TotalAmountOfPages;
        var nextPage = CurrentPage + 1;
        Links.Add(new LinkModel(nextPage, isNextPageLinkEnabled, "Next"));
    }
}
